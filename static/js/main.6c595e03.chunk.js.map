{"version":3,"sources":["components/YTPlayer/YTPlayer.js","components/Screen/Screen.js","components/Screen/index.js","components/App/index.js","components/App/App.js","serviceWorker.js","components/Header/index.js","components/Header/Header.js","components/Footer/index.js","components/Footer/Footer.js","index.js"],"names":["YTPlayer","componentDidMount","window","YT","loadVideo","tag","document","createElement","src","onYouTubeIframeAPIReady","firstScriptTag","getElementsByTagName","parentNode","insertBefore","id","props","player","Player","videoId","events","onReady","onPlayerReady","event","target","playVideo","render","React","PureComponent","require","config","Screen","routerProps","API_ENDPOINT","useState","numClients","setNumClients","setVideoId","console","log","useEffect","socket","socketIOClient","setInterval","emit","on","data","message","className","Typography","variant","TextField","type","value","label","onChange","text","required","App","exact","path","Boolean","location","hostname","match","Header","Footer","Date","getFullYear","ReactDOM","basename","process","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"4RAoDeA,E,4MA3CbC,kBAAoB,WAGlB,GAAKC,OAAOC,GAWV,EAAKC,gBAXS,CACd,IAAMC,EAAMC,SAASC,cAAc,UACnCF,EAAIG,IAAM,qCAGVN,OAAOO,wBAA0B,EAAKL,UAEtC,IAAMM,EAAiBJ,SAASK,qBAAqB,UAAU,GAC/DD,EAAeE,WAAWC,aAAaR,EAAKK,K,EAOhDN,UAAY,WAAO,IACTU,EAAO,EAAKC,MAAZD,GAGR,EAAKE,OAAS,IAAId,OAAOC,GAAGc,OAAd,yBAAuCH,GAAM,CACzDI,QAASJ,EACTK,OAAQ,CACNC,QAAS,EAAKC,kB,EAKpBA,cAAgB,SAAAC,GACdA,EAAMC,OAAOC,a,EAGfC,OAAS,WACP,OACE,6BACE,yBAAKX,GAAE,yBAAoB,EAAKC,MAAMD,Q,YA1CvBY,IAAMC,e,yBCIdC,EAAQ,KAAUC,SCNlBC,MDQA,YAAkC,EAAfC,YAAgB,IACxCC,EAAe,4CADwB,EAGTC,qBAHS,mBAGtCC,EAHsC,KAG1BC,EAH0B,OAIfF,mBAAS,IAJM,mBAItCf,EAJsC,KAI7BkB,EAJ6B,KAyB7C,OAhBAC,QAAQC,IAAIN,GAEZO,qBAAU,WACN,IAAMC,EAASC,IAAeT,GAE9BU,aAAY,WACRF,EAAOG,KAAK,mBACb,KAEHH,EAAOI,GAAG,iBAAiB,SAAAC,GACvBR,QAAQC,IAAIO,EAAKC,SACjBX,EAAcU,EAAKX,iBAGxB,IAGC,yBAAKa,UAAU,UACVb,EAAa,kBAACc,EAAA,EAAD,CAAYC,QAAQ,MAAMf,EAA1B,iCAEd,kBAACc,EAAA,EAAD,CAAYC,QAAQ,MAApB,gCACA,6BAEA,kBAACC,EAAA,EAAD,CAAWpC,GAAG,iBAAiBqC,KAAK,OAAOC,MAAOlC,EAASmC,MAAM,mBAAmBC,SAzBzE,SAAChC,GAAD,OADGiC,EACsBjC,EAAMC,OAAO6B,MAD3BhB,EAAWmB,GAAnB,IAAAA,GA0B4FC,UAAQ,IAElH,6BAEA,6BAEItC,EAAU,kBAAC,EAAD,CAAUJ,GAAII,IAExB,O,OEhDDuC,MCIA,WACb,OACE,yBAAKV,UAAU,OACb,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAI,IAAOlC,OAAS,SAACM,GAAD,OAAiB,kBAAE,EAAF,CAASA,YAAaA,SCG1D6B,QACW,cAA7B1D,OAAO2D,SAASC,UAEe,UAA7B5D,OAAO2D,SAASC,UAEhB5D,OAAO2D,SAASC,SAASC,MACvB,2D,mBChBSC,MCCA,WACX,OACI,oE,OCHOC,MCCA,WACX,OACI,qDACwB,IAAIC,MAAOC,cADnC,gDCIRC,IAAS3C,OACL,kBAAC,IAAD,CAAQ4C,SAAUC,wBACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OACOhE,SAASiE,eAAe,SLqHjC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMjC,a","file":"static/js/main.6c595e03.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n// Code pulled from: https://stackoverflow.com/questions/54017100/how-to-integrate-youtube-iframe-api-in-reactjs-solution\r\nclass YTPlayer extends React.PureComponent {\r\n  static propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    // On mount, check to see if the API script is already loaded\r\n\r\n    if (!window.YT) { // If not, load the script asynchronously\r\n      const tag = document.createElement('script');\r\n      tag.src = 'https://www.youtube.com/iframe_api';\r\n\r\n      // onYouTubeIframeAPIReady will load the video after the script is loaded\r\n      window.onYouTubeIframeAPIReady = this.loadVideo;\r\n\r\n      const firstScriptTag = document.getElementsByTagName('script')[0];\r\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n\r\n    } else { // If script is already there, load the video directly\r\n      this.loadVideo();\r\n    }\r\n  };\r\n\r\n  loadVideo = () => {\r\n    const { id } = this.props;\r\n\r\n    // the Player object is created uniquely based on the id in props\r\n    this.player = new window.YT.Player(`youtube-player-${id}`, {\r\n      videoId: id,\r\n      events: {\r\n        onReady: this.onPlayerReady,\r\n      },\r\n    });\r\n  };\r\n\r\n  onPlayerReady = event => {\r\n    event.target.playVideo();\r\n  };\r\n\r\n  render = () => {\r\n    return (\r\n      <div>\r\n        <div id={`youtube-player-${this.props.id}`}/>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default YTPlayer;","import React, { useState, useEffect } from 'react';\r\nimport socketIOClient from 'socket.io-client';\r\nimport YTPlayer from '../YTPlayer/YTPlayer';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport '../../assets/Screen/Screen.css';\r\n\r\nconst dotenv = require('dotenv').config();\r\n\r\nexport default function Screen( { routerProps }) {\r\n    const API_ENDPOINT = \"https://lets-watch-backend.herokuapp.com/\";\r\n\r\n    const [numClients, setNumClients] = useState();\r\n    const [videoId, setVideoId] = useState(\"\");\r\n\r\n    const updateVideoId = text => setVideoId(text);\r\n    const getVideoId = (event) => updateVideoId(event.target.value);\r\n\r\n    console.log(API_ENDPOINT);\r\n\r\n    useEffect(() => {\r\n        const socket = socketIOClient(API_ENDPOINT);\r\n\r\n        setInterval(() => {\r\n            socket.emit('getNumClients');\r\n        }, 500);\r\n\r\n        socket.on('updateClients', data => {\r\n            console.log(data.message);\r\n            setNumClients(data.numClients);\r\n        })\r\n        \r\n    }, []);\r\n\r\n    return (\r\n        <div className='screen'>\r\n            {numClients ? <Typography variant=\"h6\">{numClients} users are currently watching</Typography> \r\n            :\r\n            <Typography variant=\"h6\">1 user is currently watching</Typography>}\r\n            <br />\r\n\r\n            <TextField id=\"standard-basic\" type=\"text\" value={videoId} label=\"Youtube Video Id\" onChange={getVideoId} required />\r\n            \r\n            <br />\r\n\r\n            <br />\r\n            {\r\n                videoId ? <YTPlayer id={videoId} />\r\n                :\r\n                null\r\n            }\r\n        </div>\r\n    )\r\n}","import Screen from './Screen';\r\n\r\nexport default Screen;","import App from './App';\r\n\r\nexport default App;","import React from 'react';\r\nimport '../../assets/App/App.css';\r\nimport Screen from '../Screen';\r\nimport { Route } from 'react-router-dom';\r\n\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route exact path={`/`} render={ (routerProps) => < Screen routerProps={routerProps} />} />  \r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import Header from './Header';\r\n\r\nexport default Header;","import React from 'react';\r\nimport '../../assets/Header/Header.css';\r\n\r\nexport default function Header(){\r\n    return (\r\n        <header>\r\n            Let's Watch Something Together!\r\n        </header>\r\n    )\r\n}","import Footer from './Footer';\r\n\r\nexport default Footer;","import React from 'react';\r\nimport '../../assets/Footer/Footer.css';\r\n\r\nexport default function Footer(){\r\n    return (\r\n        <footer>\r\n            Let's Watch &copy; {new Date().getFullYear()} - Created by Stephen White &amp; Champ Foronda\r\n        </footer>\r\n    )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\n\r\nReactDOM.render(\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n        <Header />\r\n        <App />\r\n        <Footer />\r\n    </Router>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}