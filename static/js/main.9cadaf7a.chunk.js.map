{"version":3,"sources":["components/YTPlayer/YTPlayer.js","components/Screen/Screen.js","components/Screen/index.js","components/App/index.js","components/App/App.js","serviceWorker.js","components/Header/index.js","components/Header/Header.js","components/Footer/index.js","components/Footer/Footer.js","index.js"],"names":["YTPlayer","componentDidMount","window","YT","loadVideo","tag","document","createElement","src","onYouTubeIframeAPIReady","firstScriptTag","getElementsByTagName","parentNode","insertBefore","id","props","player","Player","videoId","events","onReady","onPlayerReady","event","target","playVideo","render","React","PureComponent","require","config","Screen","routerProps","API_ENDPOINT","process","REACT_APP_API_ENDPOINT","useState","numClients","setNumClients","console","log","useEffect","socket","socketIOClient","setInterval","emit","on","data","message","className","App","exact","path","Boolean","location","hostname","match","Header","Footer","Date","getFullYear","ReactDOM","basename","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"sWAoDeA,E,4MA3CbC,kBAAoB,WAGlB,GAAKC,OAAOC,GAWV,EAAKC,gBAXS,CACd,IAAMC,EAAMC,SAASC,cAAc,UACnCF,EAAIG,IAAM,qCAGVN,OAAOO,wBAA0B,EAAKL,UAEtC,IAAMM,EAAiBJ,SAASK,qBAAqB,UAAU,GAC/DD,EAAeE,WAAWC,aAAaR,EAAKK,K,EAOhDN,UAAY,WAAO,IACTU,EAAO,EAAKC,MAAZD,GAGR,EAAKE,OAAS,IAAId,OAAOC,GAAGc,OAAd,yBAAuCH,GAAM,CACzDI,QAASJ,EACTK,OAAQ,CACNC,QAAS,EAAKC,kB,EAKpBA,cAAgB,SAAAC,GACdA,EAAMC,OAAOC,a,EAGfC,OAAS,WACP,OACE,6BACE,yBAAKX,GAAE,yBAAoB,EAAKC,MAAMD,Q,YA1CvBY,IAAMC,e,MCCdC,EAAQ,IAAUC,SCHlBC,MDMA,YAAkC,EAAfC,YAAgB,IACxCC,EAAeC,uIAAYC,wBAA0B,4CADd,EAGTC,qBAHS,mBAGtCC,EAHsC,KAG1BC,EAH0B,KAqB7C,OAhBAC,QAAQC,IAAIP,GAEZQ,qBAAU,WACN,IAAMC,EAASC,IAAeV,GAE9BW,aAAY,WACRF,EAAOG,KAAK,mBACb,KAEHH,EAAOI,GAAG,iBAAiB,SAAAC,GACvBR,QAAQC,IAAIO,EAAKC,SACjBV,EAAcS,EAAKV,iBAGxB,IAGC,yBAAKY,UAAU,UACVZ,EAAa,mDAAeA,GAAiB,gBAC9C,kBAAC,EAAD,CAAUtB,GAAG,kB,OE9BVmC,MCIA,WACb,OACE,yBAAKD,UAAU,OACb,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAI,IAAO1B,OAAS,SAACM,GAAD,OAAiB,kBAAE,EAAF,CAASA,YAAaA,SCG1DqB,QACW,cAA7BlD,OAAOmD,SAASC,UAEe,UAA7BpD,OAAOmD,SAASC,UAEhBpD,OAAOmD,SAASC,SAASC,MACvB,2D,kBChBSC,MCCA,WACX,OACI,oE,MCHOC,MCCA,WACX,OACI,iGACoE,IAAIC,MAAOC,gBCGvFC,IAASnC,OACL,kBAAC,IAAD,CAAQoC,SAAU5B,wBACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OACO3B,SAASwD,eAAe,SLqHjC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMvB,c","file":"static/js/main.9cadaf7a.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n// Code pulled from: https://stackoverflow.com/questions/54017100/how-to-integrate-youtube-iframe-api-in-reactjs-solution\r\nclass YTPlayer extends React.PureComponent {\r\n  static propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    // On mount, check to see if the API script is already loaded\r\n\r\n    if (!window.YT) { // If not, load the script asynchronously\r\n      const tag = document.createElement('script');\r\n      tag.src = 'https://www.youtube.com/iframe_api';\r\n\r\n      // onYouTubeIframeAPIReady will load the video after the script is loaded\r\n      window.onYouTubeIframeAPIReady = this.loadVideo;\r\n\r\n      const firstScriptTag = document.getElementsByTagName('script')[0];\r\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n\r\n    } else { // If script is already there, load the video directly\r\n      this.loadVideo();\r\n    }\r\n  };\r\n\r\n  loadVideo = () => {\r\n    const { id } = this.props;\r\n\r\n    // the Player object is created uniquely based on the id in props\r\n    this.player = new window.YT.Player(`youtube-player-${id}`, {\r\n      videoId: id,\r\n      events: {\r\n        onReady: this.onPlayerReady,\r\n      },\r\n    });\r\n  };\r\n\r\n  onPlayerReady = event => {\r\n    event.target.playVideo();\r\n  };\r\n\r\n  render = () => {\r\n    return (\r\n      <div>\r\n        <div id={`youtube-player-${this.props.id}`}/>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default YTPlayer;","import React, { useState, useEffect } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport YTPlayer from \"../YTPlayer/YTPlayer\";\r\nimport '../../assets/Screen/Screen.css';\r\n\r\nconst dotenv = require('dotenv').config();\r\n\r\n\r\nexport default function Screen( { routerProps }) {\r\n    const API_ENDPOINT = process.env.REACT_APP_API_ENDPOINT || \"https://lets-watch-backend.herokuapp.com/\";\r\n\r\n    const [numClients, setNumClients] = useState();\r\n\r\n    console.log(API_ENDPOINT);\r\n\r\n    useEffect(() => {\r\n        const socket = socketIOClient(API_ENDPOINT);\r\n\r\n        setInterval(() => {\r\n            socket.emit('getNumClients');\r\n        }, 500);\r\n\r\n        socket.on('updateClients', data => {\r\n            console.log(data.message);\r\n            setNumClients(data.numClients);\r\n        })\r\n        \r\n    }, []);\r\n\r\n    return (\r\n        <div className='screen'>\r\n            {numClients ? <>numClients: {numClients}</> : \"numClients: 1\"}\r\n            <YTPlayer id=\"Qll7IHN0I4Q\"/>\r\n        </div>\r\n    )\r\n}","import Screen from './Screen';\r\n\r\nexport default Screen;","import App from './App';\r\n\r\nexport default App;","import React from 'react';\r\nimport '../../assets/App/App.css';\r\nimport Screen from '../Screen';\r\nimport { Route } from 'react-router-dom';\r\n\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route exact path={`/`} render={ (routerProps) => < Screen routerProps={routerProps} />} />  \r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import Header from './Header';\r\n\r\nexport default Header;","import React from 'react';\r\nimport '../../assets/Header/Header.css';\r\n\r\nexport default function Header(){\r\n    return (\r\n        <header>\r\n            Let's Watch Something Together!\r\n        </header>\r\n    )\r\n}","import Footer from './Footer';\r\n\r\nexport default Footer;","import React from 'react';\r\nimport '../../assets/Footer/Footer.css';\r\n\r\nexport default function Footer(){\r\n    return (\r\n        <footer>\r\n            Let's Watch - Created by Stephen White and Champ Foronda &copy;{new Date().getFullYear()}\r\n        </footer>\r\n    )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\n\r\nReactDOM.render(\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n        <Header />\r\n        <App />\r\n        <Footer />\r\n    </Router>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}