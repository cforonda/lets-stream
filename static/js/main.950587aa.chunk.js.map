{"version":3,"sources":["components/YTPlayer/index.js","components/YTPlayer/YTPlayer.js","components/Form/index.js","components/Form/Form.js","hooks/useSocket.js","components/Screen/Screen.js","components/Screen/index.js","components/App/index.js","components/App/App.js","serviceWorker.js","components/Header/index.js","components/Header/Header.js","components/Footer/index.js","components/Footer/Footer.js","index.js"],"names":["YTPlayer","componentDidMount","window","YT","loadVideo","tag","document","createElement","src","onYouTubeIframeAPIReady","firstScriptTag","getElementsByTagName","parentNode","insertBefore","id","props","player","Player","videoId","events","onReady","onPlayerReady","event","target","playVideo","render","React","PureComponent","Form","callback","fnc","useState","setVideoId","classes","makeStyles","theme","root","margin","spacing","width","useStyles","className","onSubmit","preventDefault","repeat","noValidate","autoComplete","TextField","label","variant","value","onChange","text","required","Button","style","type","API_ENDPOINT","process","REACT_APP_API_ENDPOINT","SocketContext","createContext","SocketProvider","children","socketIOClient","socket","setSocket","socketRoom","setSocketRoom","uuidv4","socketNickname","setSocketNickname","useEffect","emit","console","log","Provider","updateSocket","updateSocketRoom","updateSocketNickname","require","config","Screen","routerProps","numClients","setNumClients","useContext","setInterval","on","data","message","response","Typography","match","onClick","App","exact","path","Boolean","location","hostname","Header","Footer","Date","getFullYear","ReactDOM","basename","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.950587aa.chunk.js","sourcesContent":["import YTPlayer from \"./YTPlayer\";\r\n\r\nexport default YTPlayer;","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n// Code pulled from: https://stackoverflow.com/questions/54017100/how-to-integrate-youtube-iframe-api-in-reactjs-solution\r\nclass YTPlayer extends React.PureComponent {\r\n    static propTypes = {\r\n        id: PropTypes.string.isRequired,\r\n    };\r\n\r\n    componentDidMount = () => {\r\n        // On mount, check to see if the API script is already loaded\r\n\r\n        if (!window.YT) { // If not, load the script asynchronously\r\n            const tag = document.createElement('script');\r\n            tag.src = 'https://www.youtube.com/iframe_api';\r\n\r\n            // onYouTubeIframeAPIReady will load the video after the script is loaded\r\n            window.onYouTubeIframeAPIReady = this.loadVideo;\r\n\r\n            const firstScriptTag = document.getElementsByTagName('script')[0];\r\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n\r\n        } else { // If script is already there, load the video directly\r\n            this.loadVideo();\r\n        }\r\n    };\r\n\r\n    loadVideo = () => {\r\n        const { id } = this.props;\r\n\r\n        // the Player object is created uniquely based on the id in props\r\n        this.player = new window.YT.Player(`youtube-player-${id}`, {\r\n            videoId: id,\r\n            events: {\r\n                onReady: this.onPlayerReady,\r\n            },\r\n        });\r\n    };\r\n\r\n    onPlayerReady = event => {\r\n        event.target.playVideo();\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <div>\r\n                <div id={`youtube-player-${this.props.id}`} />\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default YTPlayer;","import Form from './Form.js';\r\n\r\nexport default Form;","import React, { useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default function Form({callback = fnc => fnc}) {\r\n    // set hooks\r\n    const [videoId, setVideoId] = useState(\"\");\r\n\r\n    const updateVideoId = (text) => setVideoId(text);\r\n    const clearVideoId = () => setVideoId(\"\");\r\n    const handleOnChange = (event) => updateVideoId(event.target.value);\r\n    const handleOnSubmit = (event) => {\r\n        event.preventDefault();\r\n        callback(videoId.repeat(1));\r\n        clearVideoId();\r\n    }\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        root: {\r\n            '& .MuiTextField-root': {\r\n                margin: theme.spacing(1),\r\n                width: '25ch'\r\n            }\r\n        }\r\n    }));\r\n\r\n    const buttonStyle = {\r\n        'padding': 'auto',\r\n        'width': '100px',\r\n        'margin': '10px',\r\n        'height': '50px'\r\n    };\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className=\"form-container\">\r\n            <form onSubmit={handleOnSubmit} className={classes.root} noValidate autoComplete=\"off\">\r\n                <TextField \r\n                    id=\"outlined-basic\"\r\n                    label=\"Youtube Link\"\r\n                    variant=\"outlined\"\r\n                    value={videoId}\r\n                    onChange={handleOnChange}\r\n                    required\r\n                />\r\n\r\n                <Button \r\n                    variant=\"contained\"\r\n                    style={buttonStyle}\r\n                    type=\"submit\"> Submit </Button>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React, { useState, useContext, createContext, useEffect } from 'react';\r\nimport socketIOClient from 'socket.io-client';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst API_ENDPOINT = process.env.REACT_APP_API_ENDPOINT || \"https://lets-watch-backend.herokuapp.com/\";\r\nconst SocketContext = createContext();\r\n\r\n/* \r\n    This function is responsible for providing the socket connection to the client\r\n    and will be uitlized in index.js to ensure re-renders do not cause an infinite\r\n    loop of socket connections.\r\n*/\r\nexport default function SocketProvider({ children }) {\r\n    const [socket, setSocket] = useState(socketIOClient(API_ENDPOINT));\r\n    const [socketRoom, setSocketRoom] = useState('community');\r\n    const [socketNickname, setSocketNickname] = useState(uuidv4());\r\n\r\n    useEffect(() => {\r\n        socket.emit('update-nickname', socketNickname);\r\n        socket.emit('join-room', socketRoom);\r\n    })\r\n\r\n    const updateSocket = socketIOClient => setSocket(socketIOClient);\r\n\r\n    const updateSocketRoom = socketRoom => {\r\n        setSocketRoom(socketRoom);\r\n        socket.emit('join-room', socketRoom );\r\n    }\r\n\r\n    const updateSocketNickname = socketNickname => {\r\n        setSocketNickname(socketNickname);\r\n        socket.emit('update-nickname', socketNickname );\r\n    }\r\n\r\n    console.log(`Socket Connection: ${API_ENDPOINT}`); // \r\n\r\n    return (\r\n        <SocketContext.Provider value={{ socket, updateSocket, socketRoom, updateSocketRoom, socketNickname, updateSocketNickname}}>\r\n            { children }\r\n        </SocketContext.Provider>\r\n    )\r\n}\r\n\r\nexport const useSocket = () => useContext(SocketContext);\r\n","import React, { useState, useEffect } from 'react';\r\nimport socketIOClient from 'socket.io-client';\r\nimport YTPlayer from '../YTPlayer/';\r\nimport Form from '../Form/';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport '../../assets/Screen/Screen.css';\r\nimport {useSocket} from '../../hooks/useSocket';\r\n\r\nconst dotenv = require('dotenv').config();\r\n\r\nexport default function Screen( { routerProps }) {\r\n\r\n    const [numClients, setNumClients] = useState();\r\n    const [videoId, setVideoId] = useState(\"\");\r\n\r\n    const updateVideoId = text => setVideoId(text);\r\n    const getVideoId = (event) => updateVideoId(event.target.value);\r\n    const { socket, socketRoom, updateSocketRoom, socketNickname,\r\n        updateSocketNickname } = useSocket();\r\n\r\n    useEffect(() => {\r\n        \r\n        setInterval(() => {\r\n            socket.emit('getNumClients');\r\n        }, 500);\r\n\r\n        socket.on('updateClients', data => {\r\n            console.log(data.message);\r\n            setNumClients(data.numClients);\r\n        })\r\n\r\n        socket.on('user-joined-room', response => {\r\n            console.log(response.message);\r\n        });\r\n\r\n        socket.on('user-joined-room-failed', response => {\r\n            console.log(response.message);\r\n        });\r\n        \r\n    }, []);\r\n\r\n    const youtubeVideoCallback = (response) => {\r\n        var regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\r\n        setVideoId(response.match(regExp)[7]);\r\n    };\r\n    \r\n    const handleGetNickname = () => {\r\n        console.log(`Hello ${socketNickname}!`);\r\n    }\r\n\r\n    const handleGetRoomName = () => {\r\n        console.log(`Hello ${socketNickname}, you are currently in room: ${socketRoom}`);\r\n    }\r\n\r\n    return (\r\n        <div className='screen'>\r\n            {numClients ? <Typography variant=\"h6\">{numClients} users are currently watching</Typography> \r\n            :\r\n            <Typography variant=\"h6\">1 user is currently watching</Typography>}\r\n\r\n            <br />\r\n            <Form callback={youtubeVideoCallback} />\r\n            <br />\r\n            \r\n            <button value='Get Nickname' onClick={handleGetNickname}>\r\n                Get Nickname\r\n            </button>\r\n            <button value='Get Room Name' onClick={handleGetRoomName}>\r\n                Get Room Name\r\n            </button>\r\n\r\n            <br /><br />\r\n            \r\n            {\r\n                videoId ? <YTPlayer id={videoId} />\r\n                :\r\n                null\r\n            }\r\n        </div>\r\n    )\r\n}","import Screen from './Screen';\r\n\r\nexport default Screen;","import App from './App';\r\n\r\nexport default App;","import React from 'react';\r\nimport '../../assets/App/App.css';\r\nimport Screen from '../Screen';\r\nimport { Route } from 'react-router-dom';\r\n\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route exact path={`/`} render={ (routerProps) => < Screen routerProps={routerProps} />} />  \r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import Header from './Header';\r\n\r\nexport default Header;","import React from 'react';\r\nimport '../../assets/Header/Header.css';\r\n\r\nexport default function Header(){\r\n    return (\r\n        <header>\r\n            Let's Watch Something Together!\r\n        </header>\r\n    )\r\n}","import Footer from './Footer';\r\n\r\nexport default Footer;","import React from 'react';\r\nimport '../../assets/Footer/Footer.css';\r\n\r\nexport default function Footer(){\r\n    return (\r\n        <footer>\r\n            Let's Watch &copy; {new Date().getFullYear()} - Created by Stephen White &amp; Champ Foronda\r\n        </footer>\r\n    )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\nimport SocketProvider from './hooks/useSocket';\r\n\r\nReactDOM.render(\r\n    <SocketProvider>\r\n        <Router basename={process.env.PUBLIC_URL}>\r\n        <Header />\r\n        <App />\r\n        <Footer />\r\n        </Router>\r\n    </SocketProvider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}